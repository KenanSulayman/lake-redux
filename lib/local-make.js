// Generated by CoffeeScript 1.6.3
(function() {
  var async, createMakefiles, debug, exec, findProjectRoot, fs, inspect, nopt, path, pkg, spawn, _, _ref;

  fs = require('fs');

  path = require('path');

  _ref = require('child_process'), exec = _ref.exec, spawn = _ref.spawn;

  inspect = require('util').inspect;

  _ = require('underscore')._;

  async = require('async');

  nopt = require('nopt');

  debug = require('debug')('local-make');

  pkg = require('../package');

  createMakefiles = require('./create_makefile').createMakefiles;

  findProjectRoot = require('./file-locator').findProjectRoot;

  module.exports.build = function() {
    var knownOpts, parsedArgs, shortHands, target;
    knownOpts = {
      preventMakefileRebuild: Boolean,
      preventMakeRun: Boolean,
      input: String,
      output: String,
      global: String,
      help: Boolean,
      version: Boolean,
      verbose: Boolean
    };
    shortHands = {
      p: ['--preventMakefileRebuild'],
      d: ['--preventMakeRun'],
      i: ['--input'],
      o: ['--output'],
      g: ['--global'],
      h: ['--help'],
      v: ['--version'],
      V: ['--verbose']
    };
    parsedArgs = nopt(knownOpts, shortHands, process.argv, 2);
    module.exports.verbose = parsedArgs.verbose;
    if (parsedArgs.version) {
      console.log(pkg.version);
      return process.exit(0);
    }
    if (parsedArgs.help) {
      console.log('USAGE');
      console.log(inspect(shortHands));
      process.exit(0);
    }
    if (parsedArgs.preventMakefileRebuild == null) {
      parsedArgs.preventMakefileRebuild = true;
    }
    if (parsedArgs.preventMakefileRebuild) {
      console.log('(don\'t update Makefile.mk)');
    }
    target = parsedArgs.argv.remain[0];
    if (target == null) {
      target = '';
    }
    return async.waterfall([
      function(cb) {
        return findProjectRoot(cb);
      }, function(projectRoot, cb) {
        if (parsedArgs.preventMakefileRebuild) {
          cb(null, projectRoot);
          return;
        }
        debug('createMakefiles');
        return createMakefiles(parsedArgs.input, parsedArgs.output, parsedArgs.global, function(err) {
          return cb(err, projectRoot);
        });
      }, function(projectRoot, cb) {
        var args, make, prefix;
        if (parsedArgs.preventMakeRun) {
          cb(null, 0);
          return;
        }
        console.log('------------------------------');
        console.log("project root is " + projectRoot);
        prefix = path.relative(projectRoot, process.cwd());
        if (prefix === '') {
          console.log('building default target');
        } else {
          console.log("building '" + prefix + "'");
        }
        target = path.join(prefix, target);
        if (target === '.') {
          target = '';
        }
        args = _.compact(['-C', projectRoot, target]);
        make = spawn('make', args);
        make.stdout.pipe(process.stdout);
        make.stderr.pipe(process.stderr);
        return make.on('close', function(exitCode) {
          console.log('------------------------------');
          if (exitCode !== 0) {
            cb(new Error("make exit code is " + exitCode));
          }
          return cb(null, exitCode);
        });
      }
    ], function(err, exitCode) {
      if (err != null) {
        console.error(err.message);
        exitCode || (exitCode = 1);
      } else if (exitCode === 0) {
        console.log('done');
      } else {
        console.log('done with make errors');
      }
      return process.exit(exitCode);
    });
  };

}).call(this);
