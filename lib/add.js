// Generated by CoffeeScript 1.6.3
(function() {
  var async, debug, features, findProjectRoot, fs, getFeatureList, inspect, knownOpts, nopt, parsedArgs, path, shortHands, _ref;

  fs = require('fs');

  path = require('path');

  inspect = require('util').inspect;

  async = require('async');

  debug = require('debug')('lake-add');

  nopt = require('nopt');

  _ref = require('./file-locator'), findProjectRoot = _ref.findProjectRoot, getFeatureList = _ref.getFeatureList;

  knownOpts = {
    help: Boolean
  };

  shortHands = {
    h: ['--help']
  };

  parsedArgs = nopt(knownOpts, shortHands, process.argv, 2);

  features = parsedArgs.argv.remain;

  debug("adding " + features);

  if (parsedArgs.help || !(features != null ? features.length : void 0)) {
    console.log('USAGE');
    console.log(inspect(knownOpts));
    console.log(inspect(shortHands));
    process.exit(0);
  }

  async.waterfall([
    findProjectRoot, function(projectRoot, callback) {
      return getFeatureList(function(err, list) {
        return callback(err, projectRoot, list);
      });
    }, function(projectRoot, preexistingFeatures, callback) {
      var addList, feature, outPath, _i, _len;
      outPath = path.join(projectRoot, '.lake/features');
      addList = [];
      for (_i = 0, _len = features.length; _i < _len; _i++) {
        feature = features[_i];
        feature = path.resolve(feature);
        if (feature.length < projectRoot.length || feature.substr(0, projectRoot.length) !== projectRoot) {
          return callback(new Error("Unable to add feature " + feature));
        }
        feature = feature.substr(projectRoot.length + 1);
        if (preexistingFeatures.indexOf(feature !== -1)) {
          console.log("ignoring pre-existing feature " + feature);
        } else {
          debug("adding feature " + feature);
          addList.push(feature);
        }
      }
      return fs.appendFile(outPath, addList.join('\n') + '\n', callback);
    }
  ], function(err) {
    if (err != null) {
      console.error(err);
      process.exit(1);
    }
    return process.exit(0);
  });

}).call(this);
