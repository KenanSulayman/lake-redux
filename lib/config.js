// Generated by CoffeeScript 1.8.0
(function() {
  var findConfig, fs, loadConfig, loadOldConfig, path, _config, _root;

  path = require('path');

  fs = require('fs');

  try {
    require('coffee-script/register');
  } catch (_error) {}

  _config = void 0;

  _root = void 0;

  loadOldConfig = function(root) {
    var config, p;
    p = path.join(root, '.lake');
    if (fs.existsSync(p)) {
      config = require(path.join(p, 'config'));
    }
    if (config.config.lakeOutput == null) {
      config.config.lakeOutput = path.join(p, 'build');
    }
    return config;
  };

  loadConfig = function(root) {
    var c, configurator, e, p;
    p = path.join(root, 'lake.config');
    try {
      configurator = require(p);
    } catch (_error) {
      e = _error;
    }
    if (!(configurator instanceof Function)) {
      return configurator;
    }
    c = {
      config: {
        lakePath: root,
        lakeOutput: path.join(root, 'build', 'lake')
      }
    };
    configurator(c);
    return c;
  };

  findConfig = function() {
    var currPath, root;
    currPath = process.cwd().split(path.sep);
    while (currPath.length) {
      root = "/" + (path.join.apply(path, currPath));
      _config = loadConfig(root);
      if (_config == null) {
        _config = loadOldConfig(root);
      }
      if (_config) {
        _root = root;
        return true;
      }
      currPath.pop();
    }
    return false;
  };

  module.exports = {
    projectRoot: function() {
      if (!((_root != null) || findConfig())) {
        return void 0;
      }
      return _root;
    },
    config: function() {
      if (!((_config != null) || findConfig())) {
        return void 0;
      }
      return _config;
    }
  };

}).call(this);
