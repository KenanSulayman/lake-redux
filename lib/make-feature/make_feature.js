// Generated by CoffeeScript 1.6.3
/*
    usage:
    make_feature <name>
*/


(function() {
  var async, copyFiles, debug, dive, eco, exec, filterContent, findProjectRoot, fs, getClassName, knownOpts, libPrefix, main, mkdirp, name, nopt, once, parsed, path, processFile, replaceFilename, shortHands, _;

  nopt = require("nopt");

  path = require("path");

  exec = require("child_process").exec;

  dive = require("dive");

  fs = require("fs");

  mkdirp = require("mkdirp");

  once = require("once");

  async = require("async");

  eco = require("eco");

  debug = require('debug')('make-feature');

  _ = require('underscore')._;

  findProjectRoot = require('../file-locator').findProjectRoot;

  processFile = function(_arg, cb) {
    var content, destDir, destPath, filepath, replacements;
    filepath = _arg.filepath, destPath = _arg.destPath, replacements = _arg.replacements;
    debug("Processing " + filepath);
    destDir = path.dirname(destPath);
    content = fs.readFileSync(filepath, "utf8");
    content = filterContent(content, replacements);
    return mkdirp(destDir, function(err) {
      if (err != null) {
        return cb(err);
      }
      debug("created directory " + destDir);
      fs.writeFileSync(destPath, content);
      debug("wrote " + destPath);
      return cb(null);
    });
  };

  copyFiles = function(src, dest, replacements, cb) {
    var q;
    cb = once(cb);
    q = async.queue(processFile, 1);
    q.drain = function() {
      debug("cb() by drain");
      return cb();
    };
    return dive(src, {
      all: true
    }, function(err, filepath) {
      var destPath, relativeDestPath, relativeSrcPath;
      if (err != null) {
        throw err;
      }
      relativeSrcPath = path.relative(src, filepath);
      relativeDestPath = replaceFilename(relativeSrcPath, replacements);
      destPath = path.join(dest, relativeDestPath);
      return q.push({
        filepath: filepath,
        destPath: destPath,
        replacements: replacements
      }, function() {
        return debug("queue item: " + filepath + " finished");
      });
    });
  };

  replaceFilename = function(content, replacements) {
    var key, value;
    for (key in replacements) {
      value = replacements[key];
      content = content.replace(new RegExp("__BOILERPLATE_" + key + "__|" + key + "$", 'g'), value);
    }
    return content;
  };

  filterContent = function(content, replacements) {
    return eco.render(content, replacements);
  };

  /*
      replace _ and - and convert it to a CamelCase name
  */


  getClassName = function(name) {
    var upperChunks;
    upperChunks = _(name.split('-')).map(function(item) {
      return item.substr(0, 1).toUpperCase() + item.substr(1);
    });
    upperChunks = _(upperChunks.join('').split('_')).map(function(item) {
      return item.substr(0, 1).toUpperCase() + item.substr(1);
    });
    return upperChunks.join('');
  };

  main = function(name, libPrefix, description, cb) {
    var className, replacements;
    libPrefix = 'lib';
    className = getClassName(name);
    replacements = {
      NAME: name,
      CLASSNAME: className,
      INSTANCENAME: "" + (className[0].toLowerCase()) + (className.slice(1)),
      DESCRIPTION: description,
      LOGGER_ID: "rplan." + name,
      DEBUG_ID: "rplan." + name,
      LOGGER_LIB_ID: "rplan.lib." + name,
      DEBUG_LIB_ID: "rplan.lib." + name,
      "coffee.eco": "coffee"
    };
    return findProjectRoot(function(err, projectRoot) {
      var featurePath, srcPath;
      if (err != null) {
        return err;
      }
      featurePath = path.join(projectRoot, libPrefix, name);
      console.log("Creating feature " + name + " in " + featurePath);
      srcPath = "" + __dirname + "/helloworld";
      return copyFiles(srcPath, featurePath, replacements, cb);
    });
  };

  /*
      TODO: refactor local-make that libPrefix can be something other than 'lib'
  */


  if (require.main === module) {
    knownOpts = {
      server: Boolean,
      client: Boolean,
      description: String,
      path: String
    };
    shortHands = {
      "s": ["--server"],
      "c": ["--client"],
      "d": ["--description"],
      "p": ["--path"]
    };
    parsed = nopt(knownOpts, shortHands, process.argv, 2);
    if (parsed.argv.remain.length === 1) {
      name = parsed.argv.remain[0];
    }
    libPrefix = parsed.path || 'lib';
    if (name == null) {
      console.log("Usage: " + (path.basename(process.argv[1])) + " <name> -d <description>");
      console.log("");
      process.exit(1);
    }
    main(name, libPrefix, parsed.description, function(err) {
      if (err != null) {
        console.error(err);
        process.exit(1);
      }
      debug("feature creation finished");
      return process.exit(0);
    });
  }

  module.exports = main;

}).call(this);
