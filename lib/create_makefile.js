// Generated by CoffeeScript 1.8.0
(function() {
  var Config, RuleBook, createLocalMakefileInc, debug, fs, getFilename, path, writeToFile;

  path = require('path');

  fs = require('fs');

  debug = require('debug')('create-makefile');

  Config = require('./config');

  RuleBook = require('./rulebook');

  module.exports.createMakefiles = function(input, output) {
    var CustomConfig, customConfig, err, featurePath, lakeConfig, manifest, manifestPath, projectRoot, _i, _len;
    projectRoot = Config.projectRoot();
    lakeConfig = Config.config();
    if (output == null) {
      output = path.join(lakeConfig.config.lakeOutput);
    }
    CustomConfig = function(featurePath) {
      this.featurePath = featurePath;
      return this.projectRoot = projectRoot;
    };
    CustomConfig.prototype = lakeConfig.config;
    process.stdout.write("Generating Makefiles");
    for (_i = 0, _len = input.length; _i < _len; _i++) {
      featurePath = input[_i];
      manifest = null;
      try {
        manifestPath = path.join(projectRoot, featurePath, 'Manifest');
        manifest = require(manifestPath);
      } catch (_error) {
        err = _error;
        err.message = "Error in Manifest " + featurePath + ": " + err.message;
        debug(err.message);
        return err;
      }
      customConfig = new CustomConfig(featurePath);
      createLocalMakefileInc(lakeConfig.rules, customConfig, manifest, output);
      process.stdout.write(".");
    }
    console.log("");
    return null;
  };

  createLocalMakefileInc = function(ruleFiles, config, manifest, output) {
    var mkFilePath, ruleBook, ruleFile, ruleFilePath, rules, _i, _len;
    ruleBook = new RuleBook();
    for (_i = 0, _len = ruleFiles.length; _i < _len; _i++) {
      ruleFile = ruleFiles[_i];
      ruleFilePath = path.join(config.projectRoot, ruleFile);
      rules = require(ruleFilePath);
      rules.addRules(config, manifest, ruleBook);
    }
    ruleBook.close();
    mkFilePath = getFilename(config.projectRoot, config.featurePath, output);
    return writeToFile(mkFilePath, ruleBook);
  };

  getFilename = function(projectRoot, featurePath, output) {
    var featureName, mkFilePath;
    featureName = path.basename(featurePath);
    mkFilePath = path.join(path.resolve(projectRoot, output), featureName + '.mk');
    return mkFilePath;
  };

  writeToFile = function(filename, ruleBook) {
    var actions, contents, prop, rule, _i, _j, _len, _len1, _ref, _ref1;
    contents = "";
    _ref = ruleBook.getRules();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      rule = _ref[_i];
      rule.dependencies || (rule.dependencies = []);
      _ref1 = ['targets', 'dependencies', 'actions'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        prop = _ref1[_j];
        if (rule[prop] != null) {
          rule[prop] = _([rule[prop]]).flatten();
        }
      }
      if (rule.targets != null) {
        contents += ("" + (rule.targets.join(' ')) + ": ") + ("" + (rule.dependencies.join(' ')) + "\n");
        if (rule.actions != null) {
          actions = ['@echo ""', "@echo \"\u001b[3;4m" + rule.targets + "\u001b[24m\""];
          actions = actions.concat(rule.actions);
          contents += "\t" + (actions.join('\n\t')) + "\n\n";
        } else {
          contents += '\n';
        }
      }
    }
    return fs.writeFileSync(filename, contents);
  };

}).call(this);
