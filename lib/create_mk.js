// Generated by CoffeeScript 1.6.3
(function() {
  var MANIFEST_FILE_NAME, RuleBook, async, cfg, createLocalMakefileInc, createStream, debug, fs, inspect, path, writeToStream, _;

  fs = require('fs');

  path = require('path');

  inspect = require('util').inspect;

  async = require('async');

  _ = require('underscore')._;

  debug = require('debug')('lake.create_mk');

  RuleBook = require('./rulebook');

  cfg = require('./local-make');

  MANIFEST_FILE_NAME = 'Manifest';

  createLocalMakefileInc = function(lakeConfig, manifest, output, cb) {
    var featurePath, globalTargets, projectRoot, ruleBook, ruleFile, ruleFilePath, rules, stream, _i, _len, _ref;
    projectRoot = manifest.projectRoot, featurePath = manifest.featurePath;
    ruleBook = new RuleBook();
    _ref = lakeConfig.rules;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      ruleFile = _ref[_i];
      ruleFilePath = path.join(projectRoot, ruleFile);
      rules = require(ruleFilePath);
      rules.addRules(lakeConfig, featurePath, manifest, ruleBook);
      /*
      catch err
          console.error "cannot load rulefile #{ruleFile} for " +
              "feature '#{featurePath}'"
          [message, firstStackElem] = err.stack.split '\n'
          if cfg.verbose
              console.error err.stack
          else
              console.error firstStackElem
          return cb err
      */

    }
    ruleBook.close();
    ruleBook.getRules();
    /*
    catch err
    
        console.error "cannot load rulefile #{ruleFile} " +
            "for feature '#{featurePath}'"
        [message, firstStackElem] = err.stack.split '\n'
        if cfg.verbose
            console.error err.stack
        else
            console.error firstStackElem
        return cb err
    */

    globalTargets = {};
    stream = createStream(globalTargets, lakeConfig, projectRoot, featurePath, output, cb);
    writeToStream(stream, ruleBook, globalTargets);
    return stream.end();
  };

  createStream = function(globalTargets, lakeConfig, projectRoot, featurePath, output, cb) {
    var featureName, mkDirectory, mkFilePath, stream;
    featureName = path.basename(featurePath);
    mkFilePath = path.join(path.resolve(projectRoot, output), featureName + '.mk');
    mkDirectory = path.dirname(mkFilePath);
    if (!fs.existsSync(mkDirectory)) {
      fs.mkdirSync(mkDirectory);
    }
    stream = fs.createWriteStream(mkFilePath, {
      encoding: 'utf8'
    });
    stream.on('error', function(err) {
      console.error("error while stream to " + mkFilePath);
      return cb(err);
    });
    return stream.once('finish', function() {
      debug('Makefile stream finished');
      return cb(null, mkFilePath, globalTargets);
    });
  };

  writeToStream = function(stream, ruleBook, globalTargets) {
    var actions, globalKey, id, prop, rule, _i, _j, _len, _len1, _ref, _ref1, _ref2, _results;
    _ref = ruleBook.getRules();
    _results = [];
    for (id in _ref) {
      rule = _ref[id];
      if (rule.globalTargets != null) {
        _ref1 = rule.globalTargets;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          globalKey = _ref1[_i];
          if (globalTargets[globalKey] == null) {
            globalTargets[globalKey] = [];
          }
          globalTargets[globalKey].push(_([rule.targets]).flatten().join(' '));
        }
      }
      rule.dependencies || (rule.dependencies = []);
      _ref2 = ['targets', 'dependencies', 'actions'];
      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
        prop = _ref2[_j];
        if (rule[prop] != null) {
          rule[prop] = _([rule[prop]]).flatten();
        }
      }
      if (rule.targets != null) {
        stream.write("# " + id + "\n");
        stream.write(("" + (rule.targets.join(' ')) + ": ") + ("" + (rule.dependencies.join(' ')) + "\n"));
        if (rule.actions != null) {
          actions = ['@echo ""', "@echo \"\u001b[3;4m" + id + "\u001b[24m\""];
          actions = actions.concat(rule.actions);
          _results.push(stream.write("\t" + (actions.join('\n\t')) + "\n\n"));
        } else {
          _results.push(stream.write('\n'));
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  module.exports = {
    createLocalMakefileInc: createLocalMakefileInc,
    createStream: createStream,
    writeToStream: writeToStream
  };

}).call(this);
