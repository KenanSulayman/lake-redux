// Generated by CoffeeScript 1.6.3
(function() {
  var RuleBook, debug, inspect, _;

  inspect = require('util').inspect;

  debug = require('debug')('lake.rulebook');

  _ = require('underscore')._;

  RuleBook = (function() {
    function RuleBook() {
      this.ruleFactories = {};
      this.ruleTags = {};
      this.factoryOrder = [];
      this.closed = false;
    }

    RuleBook.prototype.addToGlobalTarget = function(targetName, factory) {
      debug("adding globalTargets: " + targetName);
      return factory.globalTargets.push(targetName);
    };

    RuleBook.prototype.addRule = function(id, tags, factoryFunction) {
      var factory, tag, tagList, _base, _i, _len;
      if (this.closed) {
        throw new Error('RuleBook is already closed, ' + 'you can\'t add rules anymore');
      }
      debug("adding factory " + id);
      if (this.ruleFactories[id] != null) {
        throw new Error("factory already exists with id: " + id);
      }
      tags || (tags = []);
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        tag = tags[_i];
        tagList = (_base = this.ruleTags)[tag] || (_base[tag] = []);
        tagList.push(id);
      }
      factory = {
        tags: tags,
        globalTargets: [],
        _build: factoryFunction,
        _init: false,
        _processed: false
      };
      this.ruleFactories[id] = factory;
      return factory;
    };

    RuleBook.prototype.getRuleById = function(id, defaultValue) {
      if (defaultValue == null) {
        defaultValue = null;
      }
      return this._getOrResolve(id, defaultValue);
    };

    RuleBook.prototype.getRulesByTag = function(tag, arrayMode) {
      var rule, rulesForTag;
      if (arrayMode == null) {
        arrayMode = true;
      }
      rulesForTag = this.ruleTags[tag];
      if (rulesForTag == null) {
        debug("no rules for tag: " + tag + "\n" + (inspect(this.ruleTags)));
        if (arrayMode === true) {
          return [];
        } else {
          return {};
        }
      }
      if (arrayMode === false) {
        return this.getRules(rulesForTag);
      }
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = rulesForTag.length; _i < _len; _i++) {
          rule = rulesForTag[_i];
          _results.push(this._getOrResolve(rule));
        }
        return _results;
      }).call(this);
    };

    RuleBook.prototype.close = function() {
      return this.closed = true;
    };

    RuleBook.prototype.getRules = function(factoryIds) {
      var factories, id, key, _i, _len;
      factoryIds || (factoryIds = (function() {
        var _results;
        _results = [];
        for (key in this.ruleFactories) {
          _results.push(key);
        }
        return _results;
      }).call(this));
      debug("getting " + factoryIds);
      factories = {};
      for (_i = 0, _len = factoryIds.length; _i < _len; _i++) {
        id = factoryIds[_i];
        debug(id);
        factories[id] = this._getOrResolve(id);
      }
      return factories;
    };

    RuleBook.prototype._getOrResolve = function(id, defaultValue) {
      var error, factory, key, rule;
      factory = this.ruleFactories[id];
      if (!factory) {
        debug("no factory defined for id: " + id);
        return defaultValue;
      }
      if (factory._processed === true) {
        return factory._build();
      }
      if (this.closed === false) {
        throw new Error('close the RuleBook before using it');
      }
      if (factory._init === true) {
        error = new Error('circular dependency found for id: ' + ("" + id + "\nbuild order: " + (this.factoryOrder.join(' -> '))));
        error.code = 'CIRCULAR';
        throw error;
      }
      factory._init = true;
      rule = void 0;
      this.factoryOrder.push(id);
      rule = factory._build();
      /*
      catch err
          parentError = new Error("RuleBook failed for factory #{id}: #{err}")
          if err.root?
              parentError.root = err.root
          else
              parentError.root = err
          parentError.next = err
          throw parentError
      */

      for (key in rule) {
        if (_(rule[key]).isArray()) {
          rule[key] = _(rule[key]).flatten();
        }
      }
      rule.tags = factory.tags;
      rule.globalTargets = factory.globalTargets;
      factory._processed = true;
      factory._init = false;
      factory._build = function() {
        return rule;
      };
      return rule;
    };

    return RuleBook;

  })();

  module.exports = RuleBook;

}).call(this);
