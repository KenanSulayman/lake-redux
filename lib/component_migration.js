// Generated by CoffeeScript 1.6.3
(function() {
  var Glob, async, componentFile, componentGenerator, createManifest, cwd, debug, difflet, exec, fs, globber, inspect, js2c, manifestFileName, manifestGenerator, path, pattern, _;

  fs = require('fs');

  path = require('path');

  exec = require('child_process').exec;

  inspect = require('util').inspect;

  async = require('async');

  debug = require('debug')('manifest-generator.i-test');

  difflet = require('difflet')({
    indent: 4
  });

  js2c = require('js2coffee');

  _ = require('underscore')._;

  Glob = require('./globber');

  componentGenerator = require('./create_component_json');

  manifestGenerator = require('./create_manifest');

  createManifest = function(absolutePath, outputDirectory, outputFileName, callback) {
    return async.waterfall([
      function(callback) {
        var componentFilePath;
        componentFilePath = absolutePath;
        debug("reading component file: " + componentFilePath);
        return fs.readFile(componentFilePath, 'utf8', callback);
      }, function(componentJsonFileContent, callback) {
        var componentDirectory, componentObject;
        debug('generating manifest ...');
        componentObject = JSON.parse(componentJsonFileContent.toString());
        componentDirectory = path.dirname(absolutePath);
        return manifestGenerator(componentObject, componentDirectory, function(err, manifest) {
          if (err != null) {
            return callback(new Error("error when generating " + ("manifest file: " + err.message)));
          }
          debug('done');
          return callback(null, manifest, componentObject);
        });
      }, function(manifest, componentObject, callback) {
        var component, diff, success;
        debug('convert from manifest to component ...');
        manifest = js2c.build(manifest, {
          pretty_arrays: false,
          indent: true
        });
        component = componentGenerator(manifest, {
          sourceFilePrefix: 'build'
        });
        debug('comparing component.json files (original and converted)');
        success = _(componentObject).isEqual(component);
        debug('result was computed');
        if (!success) {
          diff = difflet.compare(componentObject, component);
          console.log(diff);
        }
        return callback(null, success, manifest);
      }, function(result, manifest, callback) {
        var outputPath;
        outputPath = path.join(outputDirectory, outputFileName);
        return fs.writeFile(outputPath, manifest, {
          encoding: 'utf8'
        }, function(err) {
          if (err != null) {
            return callback(err);
          }
          return callback(null, result, outputDirectory);
        });
      }
    ], callback);
  };

  componentFile = 'component.json';

  pattern = '*/component.json';

  manifestFileName = '_Manifest.coffee';

  cwd = '..';

  globber = new Glob(pattern, 'build/', {
    cwd: cwd
  });

  globber.on('match', function(filePath) {
    var absolutePath, directory;
    console.log("converting " + filePath + " ...");
    absolutePath = path.resolve(cwd, filePath);
    directory = path.dirname(absolutePath);
    return createManifest(absolutePath, directory, manifestFileName, function(err, result, path) {
      return console.log("finished witht result: " + result + " for path " + path);
    });
  });

  globber.on('end', function(err) {
    if (err != null) {
      return callback(err);
    }
  });

}).call(this);
